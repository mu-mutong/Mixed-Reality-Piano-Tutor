
//======= Copyright (c) Stereolabs Corporation, All rights reserved. ===============

using UnityEngine;

/// <summary>
/// Renders the Plane generated by the ZED in a second camera to get the alpha mesh style with no performance loss
/// This scripts is very similar to the ZED spatial mapping manager
/// </summary>
public class ZEDPlaneRenderer : MonoBehaviour
{

	/// <summary>
	/// Refernce to the camera created
	/// </summary>
	private Camera cam;

	/// <summary>
	/// Target texture of the rendering done by the the camera
	/// </summary>
	private RenderTexture planeTex;

	/// <summary>
	/// Checks if the spatial mapping has started
	/// </summary>
	private bool isReady = false;

	/// <summary>
	/// Shaders used to render with
	/// </summary>

	/// <summary>
	/// Refernce to a textureOverlay
	/// </summary>
	private ZEDRenderingPlane textureOverlay;

	//Creates a camera to render only the Mesh
	void ZEDReady()
	{
		GameObject go = new GameObject("PlaneCamera");
		go.transform.parent = transform;
		go.transform.localPosition = Vector3.zero;
		go.transform.localRotation = Quaternion.identity;
		go.transform.localScale = Vector3.one;
		cam = go.AddComponent<Camera>();
		go.hideFlags = HideFlags.HideAndDontSave;
		if (sl.ZEDCamera.GetInstance().IsCameraReady)
		{
			planeTex = new RenderTexture(sl.ZEDCamera.GetInstance().ImageWidth, sl.ZEDCamera.GetInstance().ImageHeight, 0, RenderTextureFormat.ARGB32, RenderTextureReadWrite.Default);
			planeTex.Create();
		}

		cam.enabled = false;
		cam.cullingMask = (1 << sl.ZEDCamera.TagOneObject);
		cam.targetTexture = planeTex;
		cam.nearClipPlane = 0.1f;
		cam.farClipPlane = 100.0f;
		cam.fieldOfView = sl.ZEDCamera.GetInstance().GetFOV() * Mathf.Rad2Deg;
		cam.projectionMatrix = sl.ZEDCamera.GetInstance().Projection;
		cam.backgroundColor = new Color(0, 0, 0, 0);
		cam.clearFlags = CameraClearFlags.Color;
		cam.renderingPath = RenderingPath.VertexLit;
		cam.depth = 0;
		cam.depthTextureMode = DepthTextureMode.None;

		#if UNITY_5_6_OR_NEWER
		cam.allowMSAA = false;
		cam.allowHDR = false;
		#endif
		cam.useOcclusionCulling = false;

		textureOverlay = GetComponent<ZEDRenderingPlane>();
		textureOverlay.SetTextureOverlayMapping(planeTex);

		isReady = true;
	}



	private void OnEnable()
	{
		ZEDManager.OnZEDReady += ZEDReady;
	}

	private void OnDisable()
	{
		ZEDManager.OnZEDReady -= ZEDReady;
	}

 

	// Update is called once per frame
	void Update()
	{
		if (isReady)
		{
			cam.enabled = true;
            cam.Render();
			cam.enabled = false;
		}
	}

	private void OnApplicationQuit()
	{
		if (planeTex != null && planeTex.IsCreated())
		{
			planeTex.Release();
		}
	}
}
