//======= Copyright (c) Stereolabs Corporation, All rights reserved. ===============

using sl;
using UnityEngine;

/// <summary>
///     Renders the Mesh generated by the ZED in a second camera to get the wireframe style with no performance loss
/// </summary>
public class ZEDMeshRenderer : MonoBehaviour
{
    /// <summary>
    ///     Checks if the mesh requested is textured, descativate the wireframe
    /// </summary>
    [HideInInspector] public static bool isTextured = false;

    /// <summary>
    ///     Refernce to the camera created
    /// </summary>
    private Camera cam;

    /// <summary>
    ///     Checks if the spatial mapping has started
    /// </summary>
    private bool hasStarted;

    /// <summary>
    ///     Target texture of the rendering done by the the camera
    /// </summary>
    private RenderTexture planeTex;

    /// <summary>
    ///     Shaders used to render with
    /// </summary>
    private Shader shaderWireframe;

    /// <summary>
    ///     Refernce to a textureOverlay
    /// </summary>
    private ZEDRenderingPlane textureOverlay;

    //Creates a camera to render only the Mesh
    private void ZEDReady()
    {
        var go = new GameObject("MeshCamera");
        go.transform.parent = transform;
        go.transform.localPosition = Vector3.zero;
        go.transform.localRotation = Quaternion.identity;
        go.transform.localScale = Vector3.one;
        cam = go.AddComponent<Camera>();
        go.hideFlags = HideFlags.HideAndDontSave;
        if (ZEDCamera.GetInstance().IsCameraReady)
        {
            planeTex = new RenderTexture(ZEDCamera.GetInstance().ImageWidth, ZEDCamera.GetInstance().ImageHeight, 0,
                RenderTextureFormat.ARGB32, RenderTextureReadWrite.Default);
            planeTex.Create();
        }

        cam.enabled = false;
        cam.cullingMask = 1 << ZEDCamera.TagOneObject;
        cam.targetTexture = planeTex;
        cam.nearClipPlane = 0.1f;
        cam.farClipPlane = 500.0f;
        cam.fieldOfView = ZEDCamera.GetInstance().GetFOV() * Mathf.Rad2Deg;
        cam.projectionMatrix = ZEDCamera.GetInstance().Projection;
        cam.backgroundColor = new Color(0, 0, 0, 0);
        cam.clearFlags = CameraClearFlags.Color;
        cam.renderingPath = RenderingPath.VertexLit;
        cam.depth = 0;
        cam.depthTextureMode = DepthTextureMode.None;

#if UNITY_5_6_OR_NEWER
        cam.allowMSAA = false;
        cam.allowHDR = false;
#endif
        cam.useOcclusionCulling = false;

        shaderWireframe = (Resources.Load("Materials/SpatialMapping/Mat_ZED_Wireframe_Video_Overlay") as Material)
            .shader;

        textureOverlay = GetComponent<ZEDRenderingPlane>();
        textureOverlay.SetTextureOverlayMapping(planeTex);
    }


    private void OnEnable()
    {
        ZEDSpatialMapping.OnMeshStarted += SpatialMappingStarted;
        ZEDSpatialMapping.OnMeshReady += SpatialMappingOver;
        ZEDManager.OnZEDReady += ZEDReady;
    }

    private void OnDisable()
    {
        ZEDSpatialMapping.OnMeshStarted -= SpatialMappingStarted;
        ZEDSpatialMapping.OnMeshReady -= SpatialMappingOver;

        ZEDManager.OnZEDReady -= ZEDReady;
    }

    private void SpatialMappingOver()
    {
    }


    private void SpatialMappingStarted()
    {
        hasStarted = true;
    }

    // Update is called once per frame
    private void Update()
    {
        if (ZEDSpatialMapping.display && hasStarted)
        {
            cam.enabled = true;
            GL.wireframe = true;
            cam.RenderWithShader(shaderWireframe, "RenderType");
            GL.wireframe = false;
            cam.enabled = false;
        }
    }

    private void OnApplicationQuit()
    {
        if (planeTex != null && planeTex.IsCreated()) planeTex.Release();
    }
}